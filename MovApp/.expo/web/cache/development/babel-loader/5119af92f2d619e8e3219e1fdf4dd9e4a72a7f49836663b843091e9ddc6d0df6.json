{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"onPress\", \"haptic\", \"id\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport React, { useCallback, useState } from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport * as Haptics from 'expo-haptics';\nimport { useTheme } from \"../hooks/\";\nimport Block from \"../components/Block\";\nimport Image from \"../components/Image\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar Checkbox = function Checkbox(_ref) {\n  var onPress = _ref.onPress,\n    _ref$haptic = _ref.haptic,\n    haptic = _ref$haptic === void 0 ? true : _ref$haptic,\n    _ref$id = _ref.id,\n    id = _ref$id === void 0 ? 'Checkbox' : _ref$id,\n    props = _objectWithoutProperties(_ref, _excluded);\n  var _useTheme = useTheme(),\n    colors = _useTheme.colors,\n    icons = _useTheme.icons,\n    sizes = _useTheme.sizes;\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    checked = _useState2[0],\n    setChecked = _useState2[1];\n  var handlePress = useCallback(function () {\n    onPress == null ? void 0 : onPress(!checked);\n    setChecked(!checked);\n    if (haptic) {\n      Haptics.selectionAsync();\n    }\n  }, [checked, haptic, setChecked, onPress]);\n  var checkboxID = Platform.OS === 'android' ? {\n    accessibilityLabel: id\n  } : {\n    testID: id\n  };\n  return _jsx(Pressable, _objectSpread(_objectSpread({}, checkboxID), {}, {\n    hitSlop: sizes.s,\n    onPress: handlePress,\n    children: _jsx(Block, _objectSpread(_objectSpread({\n      flex: 0,\n      align: \"center\",\n      justify: \"center\",\n      gray: !checked,\n      outlined: !checked,\n      width: sizes.checkboxWidth,\n      height: sizes.checkboxHeight,\n      radius: sizes.checkboxRadius,\n      gradient: checked ? colors.checkbox : undefined\n    }, props), {}, {\n      children: checked && _jsx(Image, {\n        source: icons.check,\n        color: colors.checkboxIcon,\n        width: sizes.checkboxIconWidth,\n        height: sizes.checkboxIconHeight\n      })\n    }))\n  }));\n};\nexport default React.memo(Checkbox);","map":{"version":3,"names":["React","useCallback","useState","Platform","Pressable","Haptics","useTheme","Block","Image","jsx","_jsx","Checkbox","_ref","onPress","_ref$haptic","haptic","_ref$id","id","props","_objectWithoutProperties","_excluded","_useTheme","colors","icons","sizes","_useState","_useState2","_slicedToArray","checked","setChecked","handlePress","selectionAsync","checkboxID","OS","accessibilityLabel","testID","_objectSpread","hitSlop","s","children","flex","align","justify","gray","outlined","width","checkboxWidth","height","checkboxHeight","radius","checkboxRadius","gradient","checkbox","undefined","source","check","color","checkboxIcon","checkboxIconWidth","checkboxIconHeight","memo"],"sources":["/Users/mauricioescudero/campusparking/MovApp/src/components/Checkbox.tsx"],"sourcesContent":["import React, {useCallback, useState} from 'react';\nimport {Platform, Pressable} from 'react-native';\n\nimport * as Haptics from 'expo-haptics';\n\nimport {useTheme} from '../hooks/';\nimport Block from '../components/Block';\nimport Image from '../components/Image';\nimport {ICheckboxProps} from '../constants/types';\n\nconst Checkbox = ({\n  onPress,\n  haptic = true,\n  id = 'Checkbox',\n  ...props\n}: ICheckboxProps) => {\n  const {colors, icons, sizes} = useTheme();\n  const [checked, setChecked] = useState(false);\n\n  const handlePress = useCallback(() => {\n    onPress?.(!checked);\n    setChecked(!checked);\n\n    /* haptic feedback onPress */\n    if (haptic) {\n      Haptics.selectionAsync();\n    }\n  }, [checked, haptic, setChecked, onPress]);\n\n  // generate component testID or accessibilityLabel based on Platform.OS\n  const checkboxID =\n    Platform.OS === 'android' ? {accessibilityLabel: id} : {testID: id};\n\n  return (\n    <Pressable {...checkboxID} hitSlop={sizes.s} onPress={handlePress}>\n      <Block\n        flex={0}\n        align=\"center\"\n        justify=\"center\"\n        gray={!checked}\n        outlined={!checked}\n        width={sizes.checkboxWidth}\n        height={sizes.checkboxHeight}\n        radius={sizes.checkboxRadius}\n        gradient={checked ? colors.checkbox : undefined}\n        {...props}>\n        {checked && (\n          <Image\n            source={icons.check}\n            color={colors.checkboxIcon}\n            width={sizes.checkboxIconWidth}\n            height={sizes.checkboxIconHeight}\n          />\n        )}\n      </Block>\n    </Pressable>\n  );\n};\n\nexport default React.memo(Checkbox);\n"],"mappings":";;;;;;AAAA,OAAOA,KAAK,IAAGC,WAAW,EAAEC,QAAQ,QAAO,OAAO;AAAC,OAAAC,QAAA;AAAA,OAAAC,SAAA;AAGnD,OAAO,KAAKC,OAAO,MAAM,cAAc;AAEvC,SAAQC,QAAQ;AAChB,OAAOC,KAAK;AACZ,OAAOC,KAAK;AAA4B,SAAAC,GAAA,IAAAC,IAAA;AAGxC,IAAMC,QAAQ,GAAG,SAAXA,QAAQA,CAAAC,IAAA,EAKQ;EAAA,IAJpBC,OAAO,GAAAD,IAAA,CAAPC,OAAO;IAAAC,WAAA,GAAAF,IAAA,CACPG,MAAM;IAANA,MAAM,GAAAD,WAAA,cAAG,IAAI,GAAAA,WAAA;IAAAE,OAAA,GAAAJ,IAAA,CACbK,EAAE;IAAFA,EAAE,GAAAD,OAAA,cAAG,UAAU,GAAAA,OAAA;IACZE,KAAK,GAAAC,wBAAA,CAAAP,IAAA,EAAAQ,SAAA;EAER,IAAAC,SAAA,GAA+Bf,QAAQ,CAAC,CAAC;IAAlCgB,MAAM,GAAAD,SAAA,CAANC,MAAM;IAAEC,KAAK,GAAAF,SAAA,CAALE,KAAK;IAAEC,KAAK,GAAAH,SAAA,CAALG,KAAK;EAC3B,IAAAC,SAAA,GAA8BvB,QAAQ,CAAC,KAAK,CAAC;IAAAwB,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAtCG,OAAO,GAAAF,UAAA;IAAEG,UAAU,GAAAH,UAAA;EAE1B,IAAMI,WAAW,GAAG7B,WAAW,CAAC,YAAM;IACpCY,OAAO,oBAAPA,OAAO,CAAG,CAACe,OAAO,CAAC;IACnBC,UAAU,CAAC,CAACD,OAAO,CAAC;IAGpB,IAAIb,MAAM,EAAE;MACVV,OAAO,CAAC0B,cAAc,CAAC,CAAC;IAC1B;EACF,CAAC,EAAE,CAACH,OAAO,EAAEb,MAAM,EAAEc,UAAU,EAAEhB,OAAO,CAAC,CAAC;EAG1C,IAAMmB,UAAU,GACd7B,QAAQ,CAAC8B,EAAE,KAAK,SAAS,GAAG;IAACC,kBAAkB,EAAEjB;EAAE,CAAC,GAAG;IAACkB,MAAM,EAAElB;EAAE,CAAC;EAErE,OACEP,IAAA,CAACN,SAAS,EAAAgC,aAAA,CAAAA,aAAA,KAAKJ,UAAU;IAAEK,OAAO,EAAEb,KAAK,CAACc,CAAE;IAACzB,OAAO,EAAEiB,WAAY;IAAAS,QAAA,EAChE7B,IAAA,CAACH,KAAK,EAAA6B,aAAA,CAAAA,aAAA;MACJI,IAAI,EAAE,CAAE;MACRC,KAAK,EAAC,QAAQ;MACdC,OAAO,EAAC,QAAQ;MAChBC,IAAI,EAAE,CAACf,OAAQ;MACfgB,QAAQ,EAAE,CAAChB,OAAQ;MACnBiB,KAAK,EAAErB,KAAK,CAACsB,aAAc;MAC3BC,MAAM,EAAEvB,KAAK,CAACwB,cAAe;MAC7BC,MAAM,EAAEzB,KAAK,CAAC0B,cAAe;MAC7BC,QAAQ,EAAEvB,OAAO,GAAGN,MAAM,CAAC8B,QAAQ,GAAGC;IAAU,GAC5CnC,KAAK;MAAAqB,QAAA,EACRX,OAAO,IACNlB,IAAA,CAACF,KAAK;QACJ8C,MAAM,EAAE/B,KAAK,CAACgC,KAAM;QACpBC,KAAK,EAAElC,MAAM,CAACmC,YAAa;QAC3BZ,KAAK,EAAErB,KAAK,CAACkC,iBAAkB;QAC/BX,MAAM,EAAEvB,KAAK,CAACmC;MAAmB,CAClC;IACF,EACI;EAAC,EACC,CAAC;AAEhB,CAAC;AAED,eAAe3D,KAAK,CAAC4D,IAAI,CAACjD,QAAQ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}