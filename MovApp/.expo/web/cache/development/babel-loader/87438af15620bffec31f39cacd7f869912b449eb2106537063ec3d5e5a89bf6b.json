{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport React, { useEffect } from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport { useFonts } from 'expo-font';\nimport { NavigationContainer, DefaultTheme } from '@react-navigation/native';\nimport * as SplashScreen from 'expo-splash-screen';\nimport Menu from \"./Menu\";\nimport { useData, ThemeProvider, TranslationProvider } from \"../hooks\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nSplashScreen.preventAutoHideAsync();\nexport default (function () {\n  var _useData = useData(),\n    isDark = _useData.isDark,\n    theme = _useData.theme,\n    setTheme = _useData.setTheme;\n  useEffect(function () {\n    Platform.OS === 'android' && StatusBar.setTranslucent(true);\n    StatusBar.setBarStyle(isDark ? 'light-content' : 'dark-content');\n    return function () {\n      StatusBar.setBarStyle('default');\n    };\n  }, [isDark]);\n  var _useFonts = useFonts({\n      'OpenSans-Light': theme.assets.OpenSansLight,\n      'OpenSans-Regular': theme.assets.OpenSansRegular,\n      'OpenSans-SemiBold': theme.assets.OpenSansSemiBold,\n      'OpenSans-ExtraBold': theme.assets.OpenSansExtraBold,\n      'OpenSans-Bold': theme.assets.OpenSansBold\n    }),\n    _useFonts2 = _slicedToArray(_useFonts, 1),\n    fontsLoaded = _useFonts2[0];\n  if (fontsLoaded) {\n    var hideSplash = function () {\n      var _ref = _asyncToGenerator(function* () {\n        yield SplashScreen.hideAsync();\n      });\n      return function hideSplash() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    hideSplash();\n  }\n  if (!fontsLoaded) {\n    return null;\n  }\n  var navigationTheme = _objectSpread(_objectSpread({}, DefaultTheme), {}, {\n    dark: isDark,\n    colors: _objectSpread(_objectSpread({}, DefaultTheme.colors), {}, {\n      border: 'rgba(0,0,0,0)',\n      text: String(theme.colors.text),\n      card: String(theme.colors.card),\n      primary: String(theme.colors.primary),\n      notification: String(theme.colors.primary),\n      background: String(theme.colors.background)\n    })\n  });\n  return _jsx(TranslationProvider, {\n    children: _jsx(ThemeProvider, {\n      theme: theme,\n      setTheme: setTheme,\n      children: _jsx(NavigationContainer, {\n        theme: navigationTheme,\n        children: _jsx(Menu, {})\n      })\n    })\n  });\n});","map":{"version":3,"names":["React","useEffect","Platform","StatusBar","useFonts","NavigationContainer","DefaultTheme","SplashScreen","Menu","useData","ThemeProvider","TranslationProvider","jsx","_jsx","preventAutoHideAsync","_useData","isDark","theme","setTheme","OS","setTranslucent","setBarStyle","_useFonts","assets","OpenSansLight","OpenSansRegular","OpenSansSemiBold","OpenSansExtraBold","OpenSansBold","_useFonts2","_slicedToArray","fontsLoaded","hideSplash","_ref","_asyncToGenerator","hideAsync","apply","arguments","navigationTheme","_objectSpread","dark","colors","border","text","String","card","primary","notification","background","children"],"sources":["/Users/mauricioescudero/campusparking/MovApp/src/navigation/App.tsx"],"sourcesContent":["import React, {useEffect} from 'react';\nimport {Platform, StatusBar} from 'react-native';\nimport {useFonts} from 'expo-font';\nimport {NavigationContainer, DefaultTheme} from '@react-navigation/native';\nimport * as SplashScreen from 'expo-splash-screen';\nimport Menu from './Menu';\nimport {useData, ThemeProvider, TranslationProvider} from '../hooks';\n\n// Keep the splash screen visible while we fetch resources\nSplashScreen.preventAutoHideAsync();\nexport default () => {\n  const {isDark, theme, setTheme} = useData();\n\n  /* set the status bar based on isDark constant */\n  useEffect(() => {\n    Platform.OS === 'android' && StatusBar.setTranslucent(true);\n    StatusBar.setBarStyle(isDark ? 'light-content' : 'dark-content');\n    return () => {\n      StatusBar.setBarStyle('default');\n    };\n  }, [isDark]);\n\n  // load custom fonts\n  const [fontsLoaded] = useFonts({\n    'OpenSans-Light': theme.assets.OpenSansLight,\n    'OpenSans-Regular': theme.assets.OpenSansRegular,\n    'OpenSans-SemiBold': theme.assets.OpenSansSemiBold,\n    'OpenSans-ExtraBold': theme.assets.OpenSansExtraBold,\n    'OpenSans-Bold': theme.assets.OpenSansBold,\n  });\n\n  if (fontsLoaded) {\n    const hideSplash = async () => {\n      await SplashScreen.hideAsync();\n    };\n    hideSplash();\n  }\n\n  if (!fontsLoaded) {\n    return null;\n  }\n\n  const navigationTheme = {\n    ...DefaultTheme,\n    dark: isDark,\n    colors: {\n      ...DefaultTheme.colors,\n      border: 'rgba(0,0,0,0)',\n      text: String(theme.colors.text),\n      card: String(theme.colors.card),\n      primary: String(theme.colors.primary),\n      notification: String(theme.colors.primary),\n      background: String(theme.colors.background),\n    },\n  };\n\n  return (\n    <TranslationProvider>\n      <ThemeProvider theme={theme} setTheme={setTheme}>\n        <NavigationContainer theme={navigationTheme}>\n          <Menu />\n        </NavigationContainer>\n      </ThemeProvider>\n    </TranslationProvider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}